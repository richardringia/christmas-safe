[{"/Users/richardringia/Projects/richardringia/kerst-kluist/src/index.js":"1","/Users/richardringia/Projects/richardringia/kerst-kluist/src/App.js":"2"},{"size":218,"mtime":1608858455859,"results":"3","hashOfConfig":"4"},{"size":4379,"mtime":1608863267326,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8rsql0",{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/richardringia/Projects/richardringia/kerst-kluist/src/index.js",[],"/Users/richardringia/Projects/richardringia/kerst-kluist/src/App.js",["11","12"],"import './App.css';\nimport React from \"react\";\n\nclass App extends React.Component {\n\n    code = [1, 2, 3, 4, 5] // the code the crack!\n\n    code_number_state_before = \"input-\" // the before string for the input\n\n    success_text = \"Gefeliciteerd de code is goed geraden! Je cadeautje is te vinden in ......\"\n\n    failed_text = \"Helaas de code is fout, probeer opnieuw!\"\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            success: undefined\n        }\n    }\n\n    /**\n     * Check if there is only one value and keeps backspace working\n     *\n     * @param event\n     */\n    onKeyDown(event) {\n        if (\n            event.target.value.length > 0 &&\n            (event.key === \"0\" || event.key === \"1\" || event.key === \"2\" || event.key === \"3\" || event.key === \"4\" || event.key === \"5\" || event.key === \"6\" || event.key === \"7\" || event.key === \"8\" || event.key === \"9\")) {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * Set the given value of input to the state\n     *\n     * @param event\n     */\n    onKeyUp(event) {\n        let value = event.target.value;\n        let name = event.target.name;\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n    /**\n     * Check if the given code is correct\n     *\n     * @param event\n     */\n    check(event) {\n        event.preventDefault();\n        let correct = true;\n\n        this.code.forEach((number, index) => {\n            if (number !== parseInt(this.state[this.code_number_state_before + index])) {\n                correct = false;\n            }\n        })\n\n        this.setState({\n            success: correct\n        })\n    }\n\n    /**\n     * Check if the button is disabled by looping through the numbers in the state\n     *\n     * @returns {boolean}\n     */\n    checkDisabled() {\n        let disabled = false;\n        this.code.forEach((number, index) => {\n            if (this.state[this.code_number_state_before + index] === undefined) {\n                disabled = true;\n            }\n        })\n        return disabled;\n    }\n\n    render() {\n\n        if (this.state.success !== undefined) {\n            return (\n                <div className={\"app message\"}>\n                    {\n                        this.state.success ?\n                            <iframe src=\"https://giphy.com/embed/l2Jhnggoa3LDBqWpG\" width=\"320\"\n                                    frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n                            :\n                            <iframe src=\"https://giphy.com/embed/BMlwRsAQhpEm2Graz6\" width=\"320\" height=\"320\"\n                                    frameBorder=\"0\"\n                                    className=\"giphy-embed\" allowFullScreen></iframe>\n                    }\n\n\n                    <p className={\"sub-title\"}>{this.state.success ? this.success_text : this.failed_text}</p>\n\n                    {\n                        !this.state.success ?\n                            (\n                                <button onClick={() => {\n                                    window.location.reload();\n                                }}>Opnieuw</button>\n                            )\n                            : null\n                    }\n                </div>\n            )\n        } else {\n            return (\n                <div className={\"app\"}>\n                    <h1>Kraak de kerst kluis!</h1>\n                    <p className={\"sub-title\"}>Vind de juiste code door cadeautjes te openen!</p>\n\n                    <div className={\"inputs-wrapper\"}>\n                        <div className={\"inputs\"}>\n                            {\n                                this.code.map((number, index) => {\n                                    return <input type={\"number\"} name={this.code_number_state_before + index}\n                                                  onKeyDown={event => this.onKeyDown(event)}\n                                                  onKeyUp={event => this.onKeyUp(event)}/>\n                                })\n                            }\n                        </div>\n                        <button className={this.checkDisabled() ? \"disabled\" : \"\"} onClick={event => this.check(event)} disabled={this.checkDisabled()}>Controleren\n                        </button>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default App;\n",{"ruleId":"13","severity":1,"message":"14","line":91,"column":29,"nodeType":"15","endLine":92,"endColumn":89},{"ruleId":"13","severity":1,"message":"14","line":94,"column":29,"nodeType":"15","endLine":96,"endColumn":77},"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement"]